start : program 	<Line: 1-5>
 program : unit 	<Line: 1-5>
  unit : func_definition 	<Line: 1-5>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement  	<Line: 1-5>
    type_specifier : INT 	<Line: 1-1>
     INT : int 	<Line: 1-1>
    ID : main 	<Line: 1-5>
    LPAREN : ( 	<Line: 1-5>
    RPAREN : ) 	<Line: 1-5>
    compound_statement : LCURL statements RCURL 	<Line: 1-5>
     LCURL : { 	<Line: 1-5>
     statements : statements statement 	<Line: 2-4>
      statements : statement 	<Line: 2-2>
       statement : var_declaration 	<Line: 2-2>
        var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 2-2>
         type_specifier : INT 	<Line: 2-2>
          INT : int 	<Line: 2-2>
         declaration_list : ID 	<Line: 2-2>
          ID : i 	<Line: 2-2>
         SEMICOLON : ; 	<Line: 2-2>
      statement : IF LPAREN expression RPAREN statement 	<Line: 3-4>
       IF : if 	<Line: 3-5>
       LPAREN : ( 	<Line: 3-5>
       expression : logic_expression 	<Line: 3-3>
        logic_expression : rel_expression LOGICOP rel_expression 	<Line: 3-3>
         rel_expression : simple_expression RELOP simple_expression 	<Line: 3-3>
          simple_expression : term 	<Line: 3-3>
           term : unary_expression 	<Line: 3-3>
            unary_expression : factor 	<Line: 3-3>
             factor : variable 	<Line: 3-3>
              variable : ID 	<Line: 3-3>
               ID : i 	<Line: 3-3>
          RELOP : > 	<Line: 3-3>
          simple_expression : term 	<Line: 3-3>
           term : unary_expression 	<Line: 3-3>
            unary_expression : factor 	<Line: 3-3>
             factor : CONST_INT 	<Line: 3-3>
              CONST_INT : 10 	<Line: 3-3>
         LOGICOP : || 	<Line: 3-3>
         rel_expression : simple_expression RELOP simple_expression 	<Line: 3-3>
          simple_expression : term 	<Line: 3-3>
           term : unary_expression 	<Line: 3-3>
            unary_expression : factor 	<Line: 3-3>
             factor : variable 	<Line: 3-3>
              variable : ID 	<Line: 3-3>
               ID : i 	<Line: 3-3>
          RELOP : < 	<Line: 3-3>
          simple_expression : term 	<Line: 3-3>
           term : unary_expression 	<Line: 3-3>
            unary_expression : factor 	<Line: 3-3>
             factor : CONST_INT 	<Line: 3-3>
              CONST_INT : 100 	<Line: 3-3>
       RPAREN : ) 	<Line: 3-5>
       statement : expression_statement 	<Line: 4-4>
        expression_statement : expression SEMICOLON 	<Line: 4-4>
         expression : variable ASSIGNOP logic_expression 	<Line: 4-4>
          variable : ID 	<Line: 4-4>
           ID : i 	<Line: 4-4>
          ASSIGNOP : = 	<Line: 4-4>
          logic_expression : rel_expression 	<Line: 4-4>
           rel_expression : simple_expression 	<Line: 4-4>
            simple_expression : term 	<Line: 4-4>
             term : unary_expression 	<Line: 4-4>
              unary_expression : factor 	<Line: 4-4>
               factor : CONST_INT 	<Line: 4-4>
                CONST_INT : 10 	<Line: 4-4>
         SEMICOLON : ; 	<Line: 4-4>
     RCURL : } 	<Line: 5-5>
