.MODEL SMALL
.STACK 1000H
.DATA
	number DB "00000$"
.CODE
main PROC
	MOV AX, @DATA
	MOV DS, AX
	PUSH BP
	MOV BP, SP
	SUB SP, 2
	SUB SP, 2
L1:
	PUSH 23
	POP AX
	MOV [BP-2], AX
L2:
	PUSH 7
	POP AX
	MOV [BP-4], AX
L13:
	PUSH 2
	PUSH [BP - 2]
	POP AX
	POP BX
	CMP AX, BX
	JE L5
	PUSH 0
	JMP L6
L5:
	PUSH 1
L6:
	POP AX
	CMP AX, 0
	JG L10
	PUSH 0
L9:
	PUSH 23
	PUSH [BP - 2]
	POP AX
	POP BX
	CMP AX, BX
	JE L7
	PUSH 0
	JMP L8
L7:
	PUSH 1
L8:
	POP AX
	POP BX
	CMP AX, 0
	JE L11
L10:
	PUSH 1
	JMP L12
L11:
	PUSH 0
L12:
	POP AX
	CMP AX, 0
	JE L14
L3:
	MOV AX, [BP - 2]
	CALL print_output
	CALL new_line
	JMP L15
L14:
L4:
	MOV AX, [BP - 4]
	CALL print_output
	CALL new_line
L15:
	ADD SP, 4
	POP BP
	MOV AX,4CH
	INT 21H
main ENDP
new_line proc
    push ax
    push dx
    mov ah,2
    mov dl,0Dh
    int 21h
    mov ah,2
    mov dl,0Ah
    int 21h
    pop dx
    pop ax
    ret
new_line endp

print_output proc  ;print what is in ax
    push ax
    push bx
    push cx
    push dx
    push si
    lea si,number
    mov bx,10
    add si,4
    cmp ax,0
    jnge negate
print:
    xor dx,dx
    div bx
    mov [si],dl
    add [si],'0'
    dec si
    cmp ax,0
    jne print
    inc si
    lea dx,si
    mov ah,9
    int 21h
    pop si
    pop dx
    pop cx
    pop bx
    pop ax
    ret

negate:
    push ax
    mov ah,2
    mov dl,'-'
    int 21h
    pop ax
    neg ax
    jmp print

print_output endp

